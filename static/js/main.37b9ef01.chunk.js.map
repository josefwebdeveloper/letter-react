{"version":3,"sources":["store/_constants/article.constants.js","store/history.js","_services/article.service.js","store/_actions/article.actions.js","components/message/voice.js","_services/timer.service.js","components/message/message.components.js","store/_constants/form.constats.js","store/_actions/form.actions.js","components/form/form.component.js","components/timer/timer.component.js","components/footer/footer.component.js","components/home/home.components.js","App.js","serviceWorker.js","store/_reducers/index.js","store/_reducers/article.reducer.js","store/_reducers/form.reducer.js","store/_reducers/voice.reducer.js","store/store.js","index.js"],"names":["articleConstants","history","createBrowserHistory","apiUrl","articleService","getRandom","fetch","method","then","handleResponse","createArticle","article","requestOptions","headers","body","JSON","stringify","response","text","parse","articleActions","random","dispatch","type","success","data","error","failure","toString","successVoice","voice","errorVoice","VoiceEnum","timerService","getTimer","Message","props","msg","SpeechSynthesisUtterance","voices","speechSynthesis","getVoices","useState","show","setShow","randomArticleVoice","useSelector","state","useDispatch","useEffect","document","querySelector","nextHandle","e","console","log","name","find","setTimeout","getElementById","innerHTML","speak","id","className","onClick","loading","randomArticle","formConstants","formActions","postArticle","request","push","Form","inputs","setInputs","setSubmitted","onSubmit","preventDefault","target","value","onChange","Timer","counter","setCounter","moment","duration","startCounter","format","Footer","href","Home","res","startTime","timer","now","Date","ms","diff","msf","s","App","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","form","post","loggerMiddleware","createLogger","store","createStore","composeWithDevTools","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.37b9ef01.chunk.js","sourcesContent":["export const articleConstants = {\n    RANDOM_REQUEST: 'ARTICLE_RANDOM_REQUEST',\n    RANDOM_SUCCESS: 'ARTICLE_RANDOM_SUCCESS',\n    RANDOM_FAILURE: 'ARTICLE_RANDOM_FAILURE',\n\n    VOICE_SUCCESS: 'ARTICLE_VOICE_SUCCESS',\n    VOICE_FAILURE: 'ARTICLE_VOICE_FAILURE',\n\n    CLEAR_ARTICLE: 'ARTICLE_CLEAR'\n};\n","import { createBrowserHistory } from 'history';\n\nexport const history = createBrowserHistory();","const apiUrl = 'https://letter-to.herokuapp.com';\nexport const articleService = {\n    getRandom,\n    createArticle,\n};\n\nfunction getRandom() {\n    const requestOptions = {\n        method: 'GET',\n        // headers: authHeader()\n    };\n\n    return fetch(`${apiUrl}/article/random`, requestOptions).then(handleResponse);\n}\n\nfunction createArticle(article) {\n    const requestOptions = {\n        method: 'POST',\n        headers: {'Content-Type': 'application/json'},\n        body: JSON.stringify(article)\n    };\n\n    return fetch(`${apiUrl}/article/create`, requestOptions).then(handleResponse);\n}\n\n\nfunction handleResponse(response) {\n    return response.text().then(text => {\n        const data = text && JSON.parse(text);\n        // if (!response.ok) {\n        //     if (response.status === 401) {\n        //         // auto logout if 401 response returned from api\n        //         logout();\n        //         location.reload(true);\n        //     }\n        //\n        //     const error = (data && data.message) || response.statusText;\n        //     return Promise.reject(error);\n        // }\n\n        return data;\n    });\n}","import {articleConstants} from '../_constants/article.constants';\nimport {history} from '../history';\nimport {articleService} from '../../_services/article.service';\n\n\nexport const articleActions = {\n    random,\n    successVoice,\n    errorVoice,\n};\n\nfunction successVoice(voice) {\n    return {type: articleConstants.VOICE_SUCCESS, voice};\n}\n\nfunction errorVoice(voice) {\n    return {type: articleConstants.VOICE_FAILURE, voice};\n}\n\n\nfunction random() {\n    return dispatch => {\n        dispatch(request());\n\n        articleService.getRandom()\n            .then(\n                article => dispatch(success(article.data.article[0])),\n                error => dispatch(failure(error.toString()))\n            );\n    };\n\n    function request() {\n        return {type: articleConstants.RANDOM_REQUEST};\n    }\n\n    function success(article) {\n        return {type: articleConstants.RANDOM_SUCCESS, article};\n    }\n\n    function failure(error) {\n        return {type: articleConstants.RANDOM_FAILURE, error};\n    }\n}\n\n"," export const VoiceEnum={\n    eng:'Daniel',\n    he:'Carmit'\n}","const apiUrl = 'https://letter-to.herokuapp.com';\nexport const timerService = {\n    getTimer\n};\nfunction getTimer() {\n    const requestOptions = {\n        method: 'GET',\n        // headers: authHeader()\n    };\n\n    return fetch(`${apiUrl}/timer`, requestOptions).then(handleResponse);\n}\nfunction handleResponse(response) {\n    return response.text().then(text => {\n        const data = text && JSON.parse(text);\n        // if (!response.ok) {\n        //     if (response.status === 401) {\n        //         // auto logout if 401 response returned from api\n        //         logout();\n        //         location.reload(true);\n        //     }\n        //\n        //     const error = (data && data.message) || response.statusText;\n        //     return Promise.reject(error);\n        // }\n\n        return data;\n    });\n}","import React, {useEffect, useState} from 'react';\nimport './message.style.scss';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {articleActions} from '../../store/_actions/article.actions';\nimport {voiceAction} from '../../store/_actions/voice.action';\nimport {VoiceEnum} from './voice'\nimport {timerService} from '../../_services/timer.service';\n\nconst Message = (props) => {\n    const msg = new SpeechSynthesisUtterance();\n    const voices = speechSynthesis.getVoices();\n    const [show, setShow] = useState(false);\n    let showSound = false;\n    const randomArticleVoice = useSelector(state => state.article);\n    const voiceV = useSelector(state => state.voice);\n    const dispatch = useDispatch();\n    let voicesDropdown;\n\n    useEffect(() => {\n        dispatch(articleActions.random());\n        voicesDropdown = document.querySelector('[name=\"voice\"]');\n        // speechSynthesis.addEventListener('voiceschanged', populateVoices);\n        // voicesDropdown.addEventListener('change', setVoice);\n        // msg.text = document.querySelector('[name=\"text\"]').value;\n        // console.log(document.getElementById('message'));\n    }, []);\n    const nextHandle = (e) => {\n        console.log(e)\n        console.log(VoiceEnum.eng,VoiceEnum.he)\n        if (e!==VoiceEnum.eng && e!==VoiceEnum.he) {\n            dispatch(articleActions.random());\n        }else{\n            const name = e;\n            msg.voice = voices.find(voice =>\n                voice.name === name\n            );\n        }\n\n        setTimeout(() => {\n            msg.text = document.getElementById('tsx').innerHTML;\n            speechSynthesis.speak(msg);\n        }, 3000);\n    };\n\n\n    const soundHandle = () => {\n        console.log(showSound);\n        showSound = !showSound;\n        console.log(showSound);\n\n    };\n\n\n\n\n    function toggle(startOver = true) {\n        speechSynthesis.cancel();\n        if (startOver) {\n            console.log(msg);\n            // dispatch(voiceAction.successVoice(msg));\n\n            speechSynthesis.speak(msg);\n        }\n    }\n\n    function setOption() {\n        console.log(this.name, this.value);\n        msg[this.name] = this.value;\n        // toggle();\n    }\n\n    return (\n        <div id='message' className=' '>\n\n            <div>\n                <button className=\"btn btn-primary\" onClick={() => {\n                    setShow(!show);\n                }}>\n                    Voice\n                </button>\n            </div>\n            <div className={show ? 'show' : 'none'}>\n                <button className=\"btn btn-primary\" onClick={() => nextHandle(VoiceEnum.eng)}>\n                    English\n                </button>\n\n                <button className=\"btn btn-primary\" onClick={() => nextHandle(VoiceEnum.he)}>\n                    Hebrew\n                </button>\n            </div>\n            <div className=\"border border-1 child-borders note  \">\n                <div id='tttt' className=\"\">\n                    {randomArticleVoice.loading && <em>Loading random-article...</em>}\n                    {randomArticleVoice.error && <span className=\"text-danger\">ERROR: {randomArticleVoice.error}</span>}\n                    {randomArticleVoice.randomArticle &&\n                    <div id='tsx' className='note'\n                    >{randomArticleVoice.randomArticle.article}</div>\n                    }\n                </div>\n\n            </div>\n            <button className=\"btn btn-primary\" onClick={nextHandle}>\n                Next\n            </button>\n        </div>\n    );\n};\n\nexport default Message;\n","export const formConstants = {\n    POST_REQUEST: 'ARTICLE_POST_REQUEST',\n    POST_SUCCESS: 'ARTICLE_POST_SUCCESS',\n    POST_FAILURE: 'ARTICLE_POST_FAILURE',\n\n    CLEAR_FORM: 'ARTICLE_FORM'\n\n};\n","import {history} from '../history';\nimport {articleService} from '../../_services/article.service';\nimport {formConstants} from '../_constants/form.constats';\n\nexport const formActions = {\n    postArticle\n};\n\nfunction postArticle(article) {\n    return dispatch => {\n        dispatch(request(article));\n\n        articleService.createArticle(article)\n            .then(\n                article => {\n                    dispatch(success(article));\n                    history.push('/');\n                },\n                error => {\n                    dispatch(failure(error.toString()));\n                }\n            );\n    };\n\n    function request(article) {\n        return {type: formConstants.POST_REQUEST, article};\n    }\n\n    function success(article) {\n        return {type: formConstants.POST_SUCCESS, article};\n    }\n\n    function failure(error) {\n        return {type: formConstants.POST_FAILURE, error};\n    }\n}\n\n\n\n","import React, {useEffect, useState} from 'react';\nimport './form.style.scss';\nimport {useDispatch} from 'react-redux';\nimport {formConstants} from '../../store/_constants/form.constats';\nimport {formActions} from '../../store/_actions/form.actions';\nimport {article} from '../../store/_reducers/article.reducer';\n\nconst Form = () => {\n    const [inputs, setInputs] = useState({\n        article: 'Dear WebSite,'\n    });\n    const [submitted, setSubmitted] = useState(false);\n    const {article} = inputs;\n    const dispatch = useDispatch();\n    useEffect(() => {\n        dispatch({type: formConstants.CLEAR_FORM});\n    }, []);\n\n    function handleChange(e) {\n\n        const {name, value} = e.target;\n        setInputs(inputs => ({...inputs, [name]: value}));\n    }\n\n    function handleSubmit(e) {\n        e.preventDefault();\n\n        setSubmitted(true);\n        if (article && article !== 'Dear WebSite,') {\n\n            // console.log({article:article,type:'crazy'});\n            dispatch(formActions.postArticle({article: article, type: 'crazy'}));\n            console.log(e.target);\n            setInputs({article: 'Dear WebSite,'});\n\n        }\n    }\n\n    return (\n        <div id='form'>\n            <div className=\" \">\n                {/*<h1>Form</h1>*/}\n                <form id='article-text' name=\"form\" onSubmit={handleSubmit}>\n                    <div className=\"form-group\">\n                        {/*<label>Article</label>*/}\n                        <textarea className='note' id='article-text' name=\"article\" value={article}\n                                  onChange={handleChange}\n                        />\n                        {/*{submitted &&*/}\n                        {/*<div className=\"invalid-feedback\">text error</div>*/}\n                        {/*}*/}\n                    </div>\n                    <div className=\"form-group\">\n                        <button className=\"btn btn-primary\">\n                            Send\n                        </button>\n                        {/*<Link to=\"/register\" className=\"btn btn-link\">Register</Link>*/}\n                    </div>\n                </form>\n            </div>\n        </div>\n    );\n};\n\nexport default Form;\n","import React, {useEffect, useState} from 'react';\nimport moment from 'moment';\nimport Moment from 'react-moment';\nimport {timerService} from '../../_services/timer.service';\n\nconst Timer = (props) => {\n    const [counter, setCounter] = useState(86400000);\n\n    useEffect(() => {\n        counter > 0  && setTimeout(() => setCounter(counter - 1000), 1000);\n    }, [counter]);\n    return (\n        <div className=\"timer\">\n            <div>Countdown: {moment.duration(counter-props.startCounter, 'milliseconds').format('hh:mm:ss')}</div>\n        </div>\n    );\n};\n\nexport default Timer;\n","import React from 'react';\nimport './footer.style.scss'\nconst Footer = () => {\n    return (\n        <div className='footer border border-1 note'>\n            <div><a href=\"https://ko-fi.com/buy_me_cofee\">Buy me a coffee on Ko-fi </a>\n                <a href=\"https://www.patreon.com/support_startup\">·Support me on Patreon</a>\n            </div>\n        </div>\n    );\n};\n\nexport default Footer;\n","import React, {useEffect, useState} from 'react';\nimport './home.style.scss';\nimport Message from '../message/message.components';\nimport Form from '../form/form.component';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {articleActions} from '../../store/_actions/article.actions';\nimport Timer from '../timer/timer.component';\nimport Footer from '../footer/footer.component';\nimport {timerService} from '../../_services/timer.service';\nimport moment from 'moment';\n\nconst Home = () => {\n    const [startCounter, setCounter] = useState(null);\n    useEffect(() => {\n        const timer = () => {\n\n            timerService.getTimer().then((res) => {\n                console.log(res);\n                const startTime = res.data.timer[0].startTime;\n                console.log(startTime);\n                const now = new Date();\n                console.log(now);\n                const ms = moment(now,).diff(moment(startTime,));\n                console.log(ms);\n                const msf = 86400000 - ms;\n                const d = moment.duration(msf);\n                const s = d.format('hh:mm:ss');\n                console.log(s);\n                setCounter(ms);\n            });\n        };\n        timer();\n    }, []);\n\n\n    return (\n        <div>\n            <div id='header' className='full-rotate'>\n                <h1>This website will self destruct <span><Timer startCounter={startCounter}/></span></h1>\n\n                <Message/>\n\n            </div>\n            <div id='header' className='full-rotate'>\n\n                <Form/>\n\n            </div>\n\n            <div id='header' className='full-rotate'>\n\n                <Footer/>\n            </div>\n        </div>\n    );\n};\n\nexport default Home;\n","import React from 'react';\nimport './App.css';\nimport Home from './components/home/home.components';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Home/>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {combineReducers} from 'redux';\n\nimport {article} from './article.reducer';\nimport {form} from './form.reducer';\nimport {voice} from './voice.reducer';\n\nconst rootReducer = combineReducers({\n    article,\n    form,\n    voice\n});\n\nexport default rootReducer;","import {articleConstants} from '../_constants/article.constants';\n\nexport function article(state = {}, action) {\n    switch (action.type) {\n        case articleConstants.RANDOM_REQUEST:\n            return {\n                loading: true\n            };\n        case articleConstants.RANDOM_SUCCESS:\n            return {\n                randomArticle: action.article\n            };\n\n        case articleConstants.RANDOM_FAILURE:\n            return {\n                error: action.error\n            };\n\n\n        case articleConstants.CLEAR_ARTICLE:\n            return {};\n        default:\n            return state;\n    }\n}","import {formConstants} from '../_constants/form.constats';\n\nexport function form(state = {}, action) {\n    switch (action.type) {\n\n        case formConstants.POST_REQUEST:\n            return {post: true};\n        case formConstants.POST_SUCCESS:\n            return {};\n        case formConstants.POST_FAILURE:\n            return {};\n        case formConstants.CLEAR_FORM:\n            return {};\n        default:\n            return state;\n    }\n}","import {articleConstants} from '../_constants/article.constants';\n\nexport function voice(state = {}, action) {\n    switch (action.type) {\n\n        case articleConstants.VOICE_SUCCESS:\n            return {\n                voice: action.voice\n            };\n\n        case articleConstants.VOICE_FAILURE:\n            return {\n                error: action.error\n            };\n\n        default:\n            return state;\n    }\n}","import {createStore, applyMiddleware} from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport {createLogger} from 'redux-logger';\nimport rootReducer from '../store/_reducers';\nimport {composeWithDevTools} from 'redux-devtools-extension';\n\nconst loggerMiddleware = createLogger();\n\nexport const store = createStore(\n    rootReducer, composeWithDevTools(\n        applyMiddleware(\n            thunkMiddleware,\n            loggerMiddleware\n        )\n    )\n);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { store } from './store/store';\n\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n    <App />\n      </Provider>,\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}