{"version":3,"sources":["store/_constants/article.constants.js","store/history.js","_services/article.service.js","store/_actions/article.actions.js","components/message/message.components.js","components/home/home.components.js","App.js","serviceWorker.js","store/_reducers/index.js","store/_reducers/article.reducer.js","store/store.js","index.js"],"names":["articleConstants","history","createBrowserHistory","apiUrl","articleService","getRandom","fetch","method","then","handleResponse","createArticle","article","requestOptions","headers","body","JSON","stringify","response","text","parse","articleActions","random","dispatch","type","success","data","error","failure","toString","postArticle","request","push","Message","randomArticle","useSelector","state","useDispatch","useEffect","id","className","loading","Home","App","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","post","loggerMiddleware","createLogger","store","createStore","composeWithDevTools","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"uSAAaA,EACO,yBADPA,EAEO,yBAFPA,EAGO,yBAHPA,EAKK,uBALLA,EAMK,uBANLA,EAOK,uB,QCLLC,EAAUC,cCFjBC,EAAS,kCACFC,EAAiB,CAC1BC,UAIJ,WAMI,OAAOC,MAAM,GAAD,OAAIH,EAAJ,mBALW,CACnBI,OAAQ,QAI6CC,KAAKC,IAT9DC,cAYJ,SAAuBC,GACnB,IAAMC,EAAiB,CACnBL,OAAQ,OACRM,QAAS,CAAC,eAAgB,oBAC1BC,KAAMC,KAAKC,UAAUL,IAGzB,OAAOL,MAAM,GAAD,OAAIH,EAAJ,mBAA6BS,GAAgBJ,KAAKC,KAIlE,SAASA,EAAeQ,GACpB,OAAOA,EAASC,OAAOV,MAAK,SAAAU,GAaxB,OAZaA,GAAQH,KAAKI,MAAMD,MCvBjC,IAAME,EAAiB,CAC1BC,OAiCJ,WACI,OAAO,SAAAC,GACHA,EAUO,CAACC,KAAMvB,IARdI,EAAeC,YACVG,MACG,SAAAG,GAAO,OAAIW,EASvB,SAAiBX,GACb,MAAO,CAACY,KAAMvB,EAAiCW,WAVnBa,CAAQb,EAAQc,KAAKd,QAAQ,QACjD,SAAAe,GAAK,OAAIJ,EAYrB,SAAiBI,GACb,MAAO,CAACH,KAAMvB,EAAiC0B,SAbrBC,CAAQD,EAAME,kBAvC5CC,YAGJ,SAAqBlB,GACjB,OAAO,SAAAW,GACHA,EAcJ,SAAiBX,GACb,MAAO,CAACY,KAAMvB,EAA+BW,WAfpCmB,CAAQnB,IAEjBP,EAAeM,cAAcC,GACxBH,MACG,SAAAG,GACIW,EAahB,SAAiBX,GACb,MAAO,CAACY,KAAMvB,EAA+BW,WAdxBa,IACTvB,EAAQ8B,KAAK,eAEjB,SAAAL,GACIJ,EAahB,SAAiBI,GACb,MAAO,CAACH,KAAMvB,EAA+B0B,SAdxBC,CAAQD,EAAME,mBChB3C,IAuBeI,EAvBC,WACZ,IAAMC,EAAgBC,aAAY,SAAAC,GAAK,OAAIA,EAAMxB,WAC3CW,EAAWc,cAKjB,OAJAC,qBAAU,WACNf,EAASF,EAAeC,YAEzB,IAEC,yBAAKiB,GAAG,WACJ,yBAAKC,UAAU,iCACX,wBAAIA,UAAU,eAAd,iBACA,yBAAKA,UAAU,iBACVN,EAAcO,SAAW,yDACzBP,EAAcP,OAAS,0BAAMa,UAAU,eAAhB,UAAsCN,EAAcP,OAC3EO,EAAcA,eACf,2BAAIA,EAAcA,cAActB,aCLrC8B,EAXF,WACT,OACI,6BACI,yBAAKH,GAAG,SAASC,UAAU,eACvB,+DACA,kBAAC,EAAD,SCGDG,MARf,WACI,OACI,yBAAKH,UAAU,OACX,kBAAC,EAAD,QCKQI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,2BCdN,IAIeC,EAJKC,0BAAgB,CAChCtC,QCHG,WAAsC,IAArBwB,EAAoB,uDAAZ,GAAIe,EAAQ,uCACxC,OAAQA,EAAO3B,MACX,KAAKvB,EACD,MAAO,CACHwC,SAAS,GAEjB,KAAKxC,EACD,MAAO,CACHiC,cAAeiB,EAAOvC,SAE9B,KAAKX,EACD,MAAO,CACH0B,MAAOwB,EAAOxB,OAEtB,KAAK1B,EACD,MAAO,CAACmD,MAAM,GAClB,KAAKnD,EAEL,KAAKA,EACD,MAAO,GACX,QACI,OAAOmC,M,QCjBbiB,EAAmBC,yBAEZC,EAAQC,sBACjBP,EAAaQ,8BACTC,0BACIC,IACAN,KCHZO,IAASC,OACP,kBAAC,IAAMC,WAAP,KACI,kBAAC,IAAD,CAAUP,MAAOA,GACnB,kBAAC,EAAD,OAFF,KAKAQ,SAASC,eAAe,SJoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1D,MAAK,SAAA2D,GACJA,EAAaC,gBAEdC,OAAM,SAAA3C,GACL4C,QAAQ5C,MAAMA,EAAM6C,c","file":"static/js/main.8f7c5264.chunk.js","sourcesContent":["export const articleConstants = {\n    RANDOM_REQUEST: 'ARTICLE_RANDOM_REQUEST',\n    RANDOM_SUCCESS: 'ARTICLE_RANDOM_SUCCESS',\n    RANDOM_FAILURE: 'ARTICLE_RANDOM_FAILURE',\n\n    POST_REQUEST: 'ARTICLE_POST_REQUEST',\n    POST_SUCCESS: 'ARTICLE_POST_SUCCESS',\n    POST_FAILURE: 'ARTICLE_POST_FAILURE',\n\n    CLEAR_ARTICLE: 'ARTICLE_CLEAR'\n};\n","import { createBrowserHistory } from 'history';\n\nexport const history = createBrowserHistory();","const apiUrl = 'https://letter-to.herokuapp.com';\nexport const articleService = {\n    getRandom,\n    createArticle,\n};\n\nfunction getRandom() {\n    const requestOptions = {\n        method: 'GET',\n        // headers: authHeader()\n    };\n\n    return fetch(`${apiUrl}/article/random`, requestOptions).then(handleResponse);\n}\n\nfunction createArticle(article) {\n    const requestOptions = {\n        method: 'POST',\n        headers: {'Content-Type': 'application/json'},\n        body: JSON.stringify(article)\n    };\n\n    return fetch(`${apiUrl}/users/register`, requestOptions).then(handleResponse);\n}\n\n\nfunction handleResponse(response) {\n    return response.text().then(text => {\n        const data = text && JSON.parse(text);\n        // if (!response.ok) {\n        //     if (response.status === 401) {\n        //         // auto logout if 401 response returned from api\n        //         logout();\n        //         location.reload(true);\n        //     }\n        //\n        //     const error = (data && data.message) || response.statusText;\n        //     return Promise.reject(error);\n        // }\n\n        return data;\n    });\n}","import {articleConstants} from '../_constants/article.constants';\nimport {history} from '../history';\nimport {articleService} from '../../_services/article.service';\n\n\nexport const articleActions = {\n    random,\n    postArticle\n};\n\nfunction postArticle(article) {\n    return dispatch => {\n        dispatch(request(article));\n\n        articleService.createArticle(article)\n            .then(\n                article => {\n                    dispatch(success());\n                    history.push('/article');\n                },\n                error => {\n                    dispatch(failure(error.toString()));\n                }\n            );\n    };\n\n    function request(article) {\n        return {type: articleConstants.POST_REQUEST, article};\n    }\n\n    function success(article) {\n        return {type: articleConstants.POST_SUCCESS, article};\n    }\n\n    function failure(error) {\n        return {type: articleConstants.POST_FAILURE, error};\n    }\n}\n\nfunction random() {\n    return dispatch => {\n        dispatch(request());\n\n        articleService.getRandom()\n            .then(\n                article => dispatch(success(article.data.article[0])),\n                error => dispatch(failure(error.toString()))\n            );\n    };\n\n    function request() {\n        return {type: articleConstants.RANDOM_REQUEST};\n    }\n\n    function success(article) {\n        return {type: articleConstants.RANDOM_SUCCESS, article};\n    }\n\n    function failure(error) {\n        return {type: articleConstants.RANDOM_FAILURE, error};\n    }\n}\n\n","import React, {useEffect} from 'react';\nimport './message.style.scss';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {articleActions} from '../../store/_actions/article.actions';\n\nconst Message = () => {\n    const randomArticle = useSelector(state => state.article);\n    const dispatch = useDispatch();\n    useEffect(() => {\n        dispatch(articleActions.random());\n        // eslint-disable-next-line\n    }, []);\n    return (\n        <div id='message'>\n            <div className=\"border border-1 child-borders\">\n                <h1 className=\"full-rotate\">Hello, world!</h1>\n                <div className=\" full-rotate \">\n                    {randomArticle.loading && <em>Loading random-article...</em>}\n                    {randomArticle.error && <span className=\"text-danger\">ERROR: {randomArticle.error}</span>}\n                    {randomArticle.randomArticle &&\n                    <p>{randomArticle.randomArticle.article}</p>\n                    }\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Message;\n","import React from 'react';\nimport './home.style.scss';\nimport Message from '../message/message.components';\n\nconst Home = () => {\n    return (\n        <div>\n            <div id='header' className='full-rotate'>\n                <h1>This website will self destruct</h1>\n                <Message/>\n            </div>\n        </div>\n    );\n};\n\nexport default Home;\n","import React from 'react';\nimport './App.css';\nimport Home from './components/home/home.components';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Home/>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {combineReducers} from 'redux';\n\nimport {article} from './article.reducer';\n\nconst rootReducer = combineReducers({\n    article\n});\n\nexport default rootReducer;","import {articleConstants} from '../_constants/article.constants';\n\nexport function article(state = {}, action) {\n    switch (action.type) {\n        case articleConstants.RANDOM_REQUEST:\n            return {\n                loading: true\n            };\n        case articleConstants.RANDOM_SUCCESS:\n            return {\n                randomArticle: action.article\n            };\n        case articleConstants.RANDOM_FAILURE:\n            return {\n                error: action.error\n            };\n        case articleConstants.POST_REQUEST:\n            return {post: true};\n        case articleConstants.POST_SUCCESS:\n            return {};\n        case articleConstants.POST_FAILURE:\n            return {};\n        default:\n            return state;\n    }\n}","import {createStore, applyMiddleware} from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport {createLogger} from 'redux-logger';\nimport rootReducer from '../store/_reducers';\nimport {composeWithDevTools} from 'redux-devtools-extension';\n\nconst loggerMiddleware = createLogger();\n\nexport const store = createStore(\n    rootReducer, composeWithDevTools(\n        applyMiddleware(\n            thunkMiddleware,\n            loggerMiddleware\n        )\n    )\n);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { store } from './store/store';\n\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n    <App />\n      </Provider>,\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}